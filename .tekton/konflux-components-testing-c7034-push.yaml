apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/nmirasch/konflux-components-testing?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/cancel-in-progress: "false"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "push" && target_branch
      == "tool_container_component"
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: test-rpms-builds
    appstudio.openshift.io/component: konflux-components-testing-c7034
    pipelines.appstudio.openshift.io/type: build
  name: konflux-components-testing-c7034-on-push
  namespace: nmirasch-tenant
spec:
  pipelineSpec:
    params:
    - name: git-url
    - name: revision
    - name: output-image
    - name: argo-cd-url
    - name: redis-url
    - name: source-commit
    - name: source-url
    workspaces:
    - name: source
    - name: git-auth
    
    tasks:
    - name: init
      taskRef:
        resolver: bundles
        params:
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:66e90d31e1386bf516fb548cd3e3f0082b5d0234b8b90dbf9e0d4684b70dbe1a
        - name: name
          value: init
        - name: kind
          value: task
      params:
      - name: image-url
        value: $(params.output-image)
      - name: rebuild
        value: "true"
    
    # TASK 1: Clone Repository
    - name: clone-repository
      runAfter: [init]
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - 'true'
      taskRef:
        resolver: bundles
        params:
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:d35e5d501cb5f5f88369511f76249857cb5ac30250e1dcf086939321964ff6b9
        - name: name
          value: git-clone-oci-ta
        - name: kind
          value: task
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      - name: ociStorage
        value: "$(params.output-image).source"
      workspaces:
      - name: output
        workspace: source
      - name: basic-auth
        workspace: git-auth
    
    # TASK 2: Build the 'spec-generator' utility image
    - name: build-spec-generator-image
      runAfter: [clone-repository]
      taskRef:
        resolver: bundles
        params:
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-buildah-remote-oci-ta:0.4@sha256:5b8d51fa889cdac873750904c3fccc0cca1c4f65af16902ebb2b573151f80657
        - name: name
          value: buildah-remote-oci-ta
        - name: kind
          value: task
      params:
      - name: IMAGE
        value: "$(params.output-image)-spec-generator"
      - name: DOCKERFILE
        value: "./Containerfile"
      - name: CONTEXT
        value: "."
      workspaces:
      - name: source
        workspace: source
    
    # TASK 3: Run the script to generate the .spec file
    - name: generate-spec-file
      runAfter: [build-spec-generator-image]
      taskSpec:
        params:
        - name: generator-image-url
        - name: argo-cd-url
        - name: redis-url
        - name: source-commit
        - name: source-url
        workspaces:
        - name: source
        steps:
        - name: run-generator
          image: $(params.generator-image-url)
          workingDir: $(workspaces.source.path)
          script: |
            #!/bin/bash
            set -euxo pipefail
            export ARGO_CD_IMAGE_URL_WITH_TAG="$(params.argo-cd-url)"
            export REDIS_IMAGE_URL_WITH_TAG="$(params.redis-url)"
            export CI_ARGO_CD_UPSTREAM_COMMIT="$(params.source-commit)"
            export CI_ARGO_CD_UPSTREAM_URL="$(params.source-url)"
            ./scripts/generate-spec.sh
      params:
      - name: generator-image-url
        value: $(tasks.build-spec-generator-image.results.IMAGE_URL)
      - name: argo-cd-url
        value: $(params.argo-cd-url)
      - name: redis-url
        value: $(params.redis-url)
      - name: source-commit
        value: $(params.source-commit)
      - name: source-url
        value: $(params.source-url)
      workspaces:
      - name: source
        workspace: source
  
  # These are the parameters for the entire PipelineRun
  params:
  - name: git-url
    value: "{{ source_url }}"
  - name: revision
    value: "{{ revision }}"
  - name: output-image
    value: "quay.io/repository/redhat-user-workloads/nmirasch-tenant/spec-file-generator" # CHANGE THIS to your actual Quay.io username and repository
  - name: argo-cd-url
    value: "registry.redhat.io/openshift-gitops-1/argocd-rhel9:v1.16"
  - name: redis-url
    value: "registry.redhat.io/rhel9/redis-6:9.6"
  - name: source-commit
    value: "bfa7247"
  - name: source-url
    value: "https://github.com/argoproj/argo-cd"
  
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes: [ReadWriteOnce]
        resources: { requests: { storage: 1Gi } }
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'