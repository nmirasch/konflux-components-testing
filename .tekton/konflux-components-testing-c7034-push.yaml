apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/nmirasch/konflux-components-testing?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/cancel-in-progress: "false"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "push" && target_branch
      == "tool_container_component"
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: test-rpms-builds
    appstudio.openshift.io/component: konflux-components-testing-c7034
    pipelines.appstudio.openshift.io/type: build
  name: konflux-components-testing-c7034-on-push
  namespace: nmirasch-tenant
spec:
  pipelineSpec:
    params:
    - name: git-url
    - name: revision
    - name: ociStorage
    - name: argo-cd-url
    - name: redis-url
    - name: source-commit
    - name: source-url
    workspaces:
    - name: source
    - name: git-auth
    
    tasks:
    # TASK 1: Repository Clone
    - name: fetch-repository
      taskRef: { name: git-clone, kind: ClusterTask }
      workspaces:
      - name: output
        workspace: source
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
    
    # TASK 2: build spec-generator image
    - name: build-spec-generator-image
      runAfter: [fetch-repository]
      taskRef: { name: buildah, kind: ClusterTask }
      params:
      - name: IMAGE
        value: "$(params.ociStorage)-spec-generator:{{revision}}" # Etiqueta única por commit
      - name: DOCKERFILE
        value: "./Containerfile"
      workspaces:
      - name: source
        workspace: source
    
    # TASK 3: generate spec file
    - name: generate-spec-file
      runAfter: [build-spec-generator-image]
      taskSpec: # Tarea embebida
        params:
        - name: argo-cd-url
        - name: redis-url
        - name: source-commit
        - name: source-url
        - name: generator-image-url # Recibe la URL de la imagen de la tarea anterior
        workspaces:
        - name: source
        steps:
        - name: generate
          image: $(params.generator-image-url) # Usa la imagen construida
          workingDir: $(workspaces.source.path)
          script: |
            #!/bin/bash
            set -euxo pipefail
            export ARGO_CD_IMAGE_URL_WITH_TAG="$(params.argo-cd-url)"
            export REDIS_IMAGE_URL_WITH_TAG="$(params.redis-url)"
            export CI_ARGO_CD_UPSTREAM_COMMIT="$(params.source-commit)"
            export CI_ARGO_CD_UPSTREAM_URL="$(params.source-url)"
            ./scripts/generate-spec-only.sh
      workspaces:
      - name: source
        workspace: source
      params:
      - name: argo-cd-url
        value: $(params.argo-cd-url)
      - name: redis-url
        value: $(params.redis-url)
      - name: source-commit
        value: $(params.source-commit)
      - name: source-url
        value: $(params.source-url)
      # Pasamos el resultado de la Tarea 2 a la Tarea 3
      - name: generator-image-url
        value: $(tasks.build-spec-generator-image.results.IMAGE_URL)
      
  # Parámetros para este PipelineRun específico
  params:
  - name: git-url
    value: "{{ source_url }}"
  - name: revision
    value: "{{ revision }}"
  - name: ociStorage
    value: "quay.io/redhat-user-workloads/nmirasch-tenant/konflux-components-testing-c7034"
  - name: argo-cd-url
    value: "registry.redhat.io/openshift-gitops-1/argocd-rhel9:gitops-1.17-rhel-9-candidate"
  - name: redis-url
    value: "registry.redhat.io/rhel9/redis-6:rhel-9.3.0-container-released"
  - name: source-commit
    value: "a1b2c3d4"
  - name: source-url
    value: "https://github.com/argoproj/argo-cd"
  
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes: [ReadWriteOnce]
        resources: { requests: { storage: 1Gi } }
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'