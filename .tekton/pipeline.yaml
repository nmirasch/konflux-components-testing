# In .tekton/pipeline.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: custom-rpm-build-pipeline
spec:
  # Parameters for the entire workflow
  params:
  - name: git-url
  - name: revision
  - name: path-context
    default: "."
  - name: package-name
  - name: ociStorage # For the final RPM artifact
  - name: target-branch
  - name: hermetic
    default: "false"
  # This parameter defines where to push the temporary tools image
  - name: tool-image-url
    description: The full URL (e.g., quay.io/your-org/builder) for the tools image.
  
  workspaces:
  - name: source
  - name: git-auth
  
  tasks:
  # Task 1: Clone the repository
  - name: fetch-repository
    workspaces:
    - name: output
      workspace: source
    - name: basic-auth
      workspace: git-auth
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
    taskSpec:
      params:
      - name: url
      - name: revision
      workspaces:
      - name: output
      - name: basic-auth
        optional: true
      steps:
      - name: clone
        image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.51.0
        script: |
          set -eu -o pipefail; CHECKOUT_DIR="$(workspaces.output.path)"; /ko-app/git-init -url "$(params.url)" -revision "$(params.revision)" -path "$CHECKOUT_DIR"; cd "$CHECKOUT_DIR"; git-credentials-setup.sh; git-config-setup.sh; FETCH_REFSPEC="refs/heads/*:refs/remotes/origin/*"; if [ "$(params.revision)" != "" ]; then FETCH_REFSPEC="refs/heads/$(params.revision):refs/remotes/origin/$(params.revision)"; fi; git fetch origin --depth=1 $FETCH_REFSPEC; if [ "$(params.revision)" == "" ]; then git checkout "$(git rev-parse HEAD)"; else git checkout "$(params.revision)"; fi; [ -f "/root/.git-credentials" ] && rm "/root/.git-credentials"; [ -f "/root/.gitconfig" ] && rm "/root/.gitconfig"
  
  # Task 2: Build your tools image from the Dockerfile
  - name: build-tools-image
    runAfter: [fetch-repository]
    workspaces:
    - name: source
      workspace: source
    params:
    - name: image
      value: $(params.tool-image-url)
    - name: context
      value: $(params.path-context)
    taskSpec:
      params:
      - name: image
      - name: context
      workspaces:
      - name: source
      results:
      - name: IMAGE_URL
      steps:
      - name: build-and-push
        image: quay.io/buildah/stable:v1.33
        workingDir: $(workspaces.source.path)
        script: |
          buildah bud -t "$(params.image)" -f "$(params.context)/Dockerfile" "$(params.context)"
          buildah push "$(params.image)" "docker://$(params.image)"
          echo -n "$(params.image)" | tee "$(results.IMAGE_URL.path)"
  
  # Task 3: Generate the .spec file using the newly built tools image
  - name: generate-spec-file
    runAfter: [build-tools-image]
    workspaces:
    - name: source
      workspace: source
    params:
    # The key change: The TOOL_IMAGE now comes from the output of the previous task
    - name: TOOL_IMAGE
      value: $(tasks.build-tools-image.results.IMAGE_URL)
    - name: PATH_CONTEXT
      value: $(params.path-context)
    taskSpec:
      params:
      - name: TOOL_IMAGE
      - name: PATH_CONTEXT
      workspaces:
      - name: source
      steps:
      - name: generate-spec
        image: $(params.TOOL_IMAGE)
        workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
        script: |
          #!/usr/bin/env bash
          set -euxo pipefail
          /workspace/pre-build-script.sh
          echo "SUCCESS: microshift-gitops.spec file generated."
  
  # Task 4: Build the RPM using the official Konflux CI task
  - name: build-rpm-package
    runAfter: [generate-spec-file]
    workspaces:
    - name: source
      workspace: source
    taskRef:
      resolver: git
      params:
      - name: url
        value: "https://github.com/konflux-ci/rpmbuild-pipeline.git"
      - name: revision
        value: "main"
      - name: pathInRepo
        value: "task/rpmbuild.yaml"
    params:
    - name: package-name
      value: $(params.package-name)
    - name: ociStorage
      value: $(params.ociStorage)
    - name: target-branch
      value: $(params.target-branch)
    - name: hermetic
      value: $(params.hermetic)
    - name: PLATFORM
      value: "linux/amd64"
    - name: script-environment-image
      value: ""
    - name: dependencies-artifact
      value: ""
    - name: calculation-artifact
      value: ""
    - name: ociArtifactExpiresAfter
      value: ""