apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: custom-rpm-build-pipeline
spec:
  params:
  - name: git-url
  - name: revision
  - name: tool-image-url
  - name: path-context
    default: "."
  workspaces:
  - name: source
  - name: git-auth
  tasks:
  # Task 1: Clone the repository
  - name: fetch-repository
    taskRef:
      resolver: hub
      params:
      - name: name
        value: git-clone
      - name: kind
        value: task
      - name: version
        value: "0.9"
    workspaces:
    - name: output
      workspace: source
    - name: basic-auth
      workspace: git-auth
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
  
  # Task 2: Build your tool image with skopeo and other tools
  - name: build-tool-image
    runAfter: [fetch-repository]
    workspaces:
    - name: source
      workspace: source
    params:
    - name: image
      value: $(params.tool-image-url)
    - name: context
      value: $(params.path-context)
    # ⬇️ The Task is now defined inline using taskSpec ⬇️
    taskSpec:
      params:
      - name: image
      - name: context
      workspaces:
      - name: source
      results:
      - name: IMAGE_URL
      - name: IMAGE_DIGEST
      steps:
      - name: build-and-push
        image: quay.io/buildah/stable:v1.33
        workingDir: $(workspaces.source.path)
        script: |
          buildah bud \
            -t "$(params.image)" \
            -f "$(params.context)/Dockerfile" "$(params.context)"
          
          buildah push \
            --digestfile "$(results.IMAGE_DIGEST.path)" \
            "$(params.image)" \
            "docker://$(params.image)"
          
          echo -n "$(params.image)" | tee "$(results.IMAGE_URL.path)"
  
  # Task 3: Generate the .spec file using the tool image
  - name: generate-spec
    runAfter: [build-tool-image]
    workspaces:
    - name: source
      workspace: source
    params:
    - name: TOOL_IMAGE
      value: $(tasks.build-tool-image.results.IMAGE_URL)
    - name: PATH_CONTEXT
      value: $(params.path-context)
    # ⬇️ This Task is also defined inline using taskSpec ⬇️
    taskSpec:
      params:
      - name: TOOL_IMAGE
      - name: PATH_CONTEXT
      workspaces:
      - name: source
      steps:
      - name: generate-spec
        image: $(params.TOOL_IMAGE)
        workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
        script: |
          #!/usr/bin/env bash
          set -euxo pipefail
          /workspace/pre-build-script.sh
          echo "SUCCESS: microshift-gitops.spec file generated."
  
  # Task 4: Build the RPM using the official Konflux CI task
  - name: build-rpm-package
    runAfter: [generate-spec]
    workspaces:
    - name: source
      workspace: source
    taskRef:
      resolver: git
      params:
      - name: url
        value: "https://github.com/konflux-ci/rpmbuild-pipeline.git"
      - name: revision
        value: "main"
      - name: pathInRepo
        value: "task/rpmbuild.yaml"